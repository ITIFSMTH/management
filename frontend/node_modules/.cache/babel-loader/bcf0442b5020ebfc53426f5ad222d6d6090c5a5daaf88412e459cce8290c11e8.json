{"ast":null,"code":"import moment from 'moment';\nexport default {\n  name: \"statistic-component\",\n  props: ['statistic'],\n  methods: {\n    formatMonth(date) {\n      const dateString = moment(date).format(\"MMMM YYYY\");\n      return dateString.charAt(0).toUpperCase() + dateString.slice(1);\n    },\n    formatDay(date) {\n      const dateString = moment(date).format(\"dddd DD.MM.YYYY\");\n      return dateString.charAt(0).toUpperCase() + dateString.slice(1);\n    },\n    formatTime(date) {\n      if (date === 0) return \"-\";\n      return moment(date).format(\"HH:mm\");\n    },\n    formatDuration(seconds) {\n      if (seconds === 0) return \"-\";\n      const hours = Math.floor(seconds / 60 / 60);\n      const minutes = Math.floor(seconds / 60 % 60);\n      const secondsRem = Math.floor(seconds % 60);\n      if (hours > 0) return `${hours}ч. ${minutes}м.`;\n      return `${minutes}м. ${secondsRem}с.`;\n    },\n    getDays() {\n      const statisticDate = new Date(this.statistic.date);\n      const monthDate = new Date(statisticDate.getFullYear(), statisticDate.getMonth() + 1, 0);\n      return Array.from({\n        length: monthDate.getDate()\n      }, (_, k) => new Date(monthDate.getFullYear(), monthDate.getMonth(), k + 1));\n    },\n    getOperatorShiftsTime(shifts) {\n      if (shifts.length === 0) return 0;\n      return shifts.reduce((a, v) => a + (new Date(v.end_date) - new Date(v.start_date)), 0) / 1000;\n    },\n    getOperatorShiftStartAtDay(shifts, day) {\n      for (const shift of shifts) {\n        if (new Date(shift.start_date).getDate() == day.getDate()) {\n          return shift.start_date;\n        }\n      }\n      return 0;\n    },\n    getOperatorShiftEndAtDay(shifts, day) {\n      for (const shift of shifts) {\n        if (new Date(shift.start_date).getDate() == day.getDate()) {\n          return shift.end_date;\n        }\n      }\n      return 0;\n    },\n    getOperatorShiftTimeAtDay(shifts, day) {\n      const shift = shifts.find(shift => new Date(shift.start_date).getDate() === day.getDate());\n      if (!shift) return 0;\n      const timeout = this.getOperatorShiftTimeoutsTimeAtDay(shifts, day);\n      return (new Date(shift.end_date) - new Date(shift.start_date)) / 1000 - timeout;\n    },\n    getOperatorShiftTimeoutsTimeAtDay(shifts, day) {\n      if (shifts.length === 0) return 0;\n      const shift = shifts.find(shift => new Date(shift.start_date).getDate() === day.getDate());\n      if (!shift || shift.timeouts.length === 0) return 0;\n      return shift.timeouts.reduce((a, v) => a + (new Date(v.end_date) - new Date(v.start_date)), 0) / 1000;\n    },\n    getOperatorShiftTimeoutsCountAtDay(shifts, day) {\n      if (shifts.length === 0) return 0;\n      const shift = shifts.find(shift => new Date(shift.start_date).getDate() === day.getDate());\n      if (!shift) return 0;\n      return shift.timeouts.length;\n    },\n    getMiddleOperatorShiftsStart(shifts) {\n      if (shifts.length === 0) return 0;\n      const minutes = Math.round(shifts.reduce((a, v) => a + new Date(v.start_date).getHours() * 60 + new Date(v.start_date).getMinutes(), 0) / shifts.length);\n      return new Date(0, 0, 0, Math.floor(minutes / 60), minutes % 60, 0, 0);\n    },\n    getMiddleOperatorShiftsEnd(shifts) {\n      if (shifts.length === 0) return 0;\n      const minutes = Math.round(shifts.reduce((a, v) => a + new Date(v.end_date).getHours() * 60 + new Date(v.end_date).getMinutes(), 0) / shifts.length);\n      return new Date(0, 0, 0, Math.floor(minutes / 60), minutes % 60, 0, 0);\n    },\n    getMiddleOperatorShiftsTimeoutsTime(shifts) {\n      if (shifts.length === 0) return 0;\n      console.log(Math.round(shifts.reduce((a, shift) => a + shift.timeouts.reduce((tA, timeout) => tA + (new Date(timeout.end_date) - new Date(timeout.start_date)), 0), 0) / shifts.length / 1000));\n      return Math.round(shifts.reduce((a, shift) => a + shift.timeouts.reduce((tA, timeout) => tA + (new Date(timeout.end_date) - new Date(timeout.start_date)), 0), 0) / shifts.length / 1000);\n    },\n    getMiddleOperatorShiftsTime(shifts) {\n      if (shifts.length === 0) return 0;\n      return Math.round(shifts.reduce((a, shift) => {\n        const timeouts = this.getOperatorShiftTimeoutsTimeAtDay(shifts, new Date(shift.start_date)) * 1000;\n        return a + (new Date(shift.end_date) - new Date(shift.start_date)) - timeouts;\n      }, 0) / shifts.length / 1000);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["moment","name","props","methods","formatMonth","date","dateString","format","charAt","toUpperCase","slice","formatDay","formatTime","formatDuration","seconds","hours","Math","floor","minutes","secondsRem","getDays","statisticDate","Date","statistic","monthDate","getFullYear","getMonth","Array","from","length","getDate","_","k","getOperatorShiftsTime","shifts","reduce","a","v","end_date","start_date","getOperatorShiftStartAtDay","day","shift","getOperatorShiftEndAtDay","getOperatorShiftTimeAtDay","find","timeout","getOperatorShiftTimeoutsTimeAtDay","timeouts","getOperatorShiftTimeoutsCountAtDay","getMiddleOperatorShiftsStart","round","getHours","getMinutes","getMiddleOperatorShiftsEnd","getMiddleOperatorShiftsTimeoutsTime","console","log","tA","getMiddleOperatorShiftsTime"],"sourceRoot":"","sources":["/home/f48d1/Documents/work/orbita/management/frontend/src/components/Admin/Statistic/Statistic.vue"],"sourcesContent":["<template>\n  <div class=\"page-block\">\n    <h2 class=\"page-block__header\">{{formatMonth(statistic.date)}}</h2>\n\n    <div class=\"table__wrapper\">\n    <table class=\"table__table\" cellspacing=\"0\">\n      <!-- TABLE HEAD -->\n      <tr class=\"table__tr\">\n        <th class=\"table__th\" rowspan=\"2\">Оператор</th>\n        <th class=\"table__th\" rowspan=\"2\">Сумма Ч.</th>\n        <th class=\"table__th\" rowspan=\"2\">Сумма З.</th>\n        <th class=\"table__th\" colspan=\"4\">Средние данные за месяц</th>\n        <th class=\"table__th\" colspan=\"5\" \n          v-for=\"day in getDays()\"\n          v-bind:key=\"day\">\n          {{formatDay(day)}}\n        </th>\n      </tr>\n        \n      <tr class=\"table__tr\">\n        <th class=\"table__th\">Начало</th>\n        <th class=\"table__th\">Конец</th>\n        <th class=\"table__th\">Перерыв</th>\n        <th class=\"table__th\">Работа</th>\n        <template \n          v-for=\"day in getDays()\"\n          v-bind:key=\"day\">\n          <th class=\"table__th\">Начало</th>\n          <th class=\"table__th\">Конец</th>\n          <th class=\"table__th\">Раб. Ч.</th>\n          <th class=\"table__th\">Пер.</th>\n          <th class=\"table__th\">Ч.З.</th>\n        </template>\n      </tr>\n\n      <!-- TABLE DATA -->\n      <tr class=\"table__tr\"\n        v-for=\"operatorStatistic in statistic.statistic\"\n        v-bind:key=\"operatorStatistic.operator.operator.id\">\n        <td class=\"table__td\">{{operatorStatistic.operator.operator.worker.login}}</td>\n        <td class=\"table__td\">{{\n          formatDuration(getOperatorShiftsTime(operatorStatistic.operator_shifts))\n        }}</td>\n        <td class=\"table__td\">0</td>\n        <td class=\"table__td\">{{formatTime(getMiddleOperatorShiftsStart(operatorStatistic.operator_shifts))}}</td>\n        <td class=\"table__td\">{{formatTime(getMiddleOperatorShiftsEnd(operatorStatistic.operator_shifts))}}</td>\n        <td class=\"table__td\">{{formatDuration(getMiddleOperatorShiftsTimeoutsTime(operatorStatistic.operator_shifts))}}</td>\n        <td class=\"table__td\">{{formatDuration(getMiddleOperatorShiftsTime(operatorStatistic.operator_shifts))}}</td>\n        <template \n          v-for=\"day in getDays()\"\n          v-bind:key=\"day\">\n          <td class=\"table__td\">{{formatTime(getOperatorShiftStartAtDay(operatorStatistic.operator_shifts, day))}}</td>\n          <td class=\"table__td\">{{formatTime(getOperatorShiftEndAtDay(operatorStatistic.operator_shifts, day))}}</td>\n          <td class=\"table__td\">{{formatDuration(getOperatorShiftTimeoutsTimeAtDay(operatorStatistic.operator_shifts, day))}}</td>\n          <td class=\"table__td\">{{getOperatorShiftTimeoutsCountAtDay(operatorStatistic.operator_shifts, day)}}</td>\n          <td class=\"table__td\">0</td>\n        </template>\n      </tr>\n    </table>\n    </div>\n  </div>\n</template>\n\n\n<script>\n  import moment from 'moment';\n\n  export default {\n    name: \"statistic-component\",\n    props: ['statistic'],\n    methods: {\n      formatMonth(date) {\n        const dateString = moment(date).format(\"MMMM YYYY\")\n        return dateString.charAt(0).toUpperCase() + dateString.slice(1)\n      },\n      formatDay(date) {\n        const dateString = moment(date).format(\"dddd DD.MM.YYYY\")\n        return dateString.charAt(0).toUpperCase() + dateString.slice(1)\n      },\n      formatTime(date) {\n        if (date === 0) return \"-\"\n        return moment(date).format(\"HH:mm\")\n      },\n      formatDuration(seconds) {\n        if (seconds === 0) return \"-\"\n        const hours = Math.floor(seconds / 60 / 60)\n        const minutes = Math.floor(seconds / 60 % 60)\n        const secondsRem = Math.floor(seconds % 60)\n        if (hours > 0) return `${hours}ч. ${minutes}м.`\n        return `${minutes}м. ${secondsRem}с.`\n      },\n      getDays() {\n        const statisticDate = new Date(this.statistic.date)\n        const monthDate = new Date(statisticDate.getFullYear(), statisticDate.getMonth() + 1, 0);\n        return Array.from({length: monthDate.getDate()}, (_, k) => new Date(\n          monthDate.getFullYear(),\n          monthDate.getMonth(),\n          k+1,\n        ))\n      },\n      getOperatorShiftsTime(shifts) {\n        if (shifts.length === 0) return 0 \n        return shifts.reduce((a, v) => a + (new Date(v.end_date) - new Date(v.start_date)), 0) / 1000\n      },\n      getOperatorShiftStartAtDay(shifts, day) {\n        for (const shift of shifts) {\n          if (new Date(shift.start_date).getDate() == day.getDate()) {\n            return shift.start_date\n          }\n        }\n        return 0\n      },\n      getOperatorShiftEndAtDay(shifts, day) {\n        for (const shift of shifts) {\n          if (new Date(shift.start_date).getDate() == day.getDate()) {\n            return shift.end_date\n          }\n        }\n        return 0\n      },\n      getOperatorShiftTimeAtDay(shifts, day) {\n        const shift = shifts.find((shift) => new Date(shift.start_date).getDate() === day.getDate())\n        if (!shift) return 0\n        const timeout = this.getOperatorShiftTimeoutsTimeAtDay(shifts, day)\n        return ((new Date(shift.end_date) - new Date(shift.start_date)) / 1000) - timeout\n      },\n      getOperatorShiftTimeoutsTimeAtDay(shifts, day) {\n        if (shifts.length === 0) return 0 \n        const shift = shifts.find((shift) => new Date(shift.start_date).getDate() === day.getDate())\n        if (!shift || shift.timeouts.length === 0) return 0\n        \n        return shift.timeouts.reduce((a, v) => a + (new Date(v.end_date) - new Date(v.start_date)), 0) / 1000\n      },\n      getOperatorShiftTimeoutsCountAtDay(shifts, day) {\n        if (shifts.length === 0) return 0 \n        const shift = shifts.find((shift) => new Date(shift.start_date).getDate() === day.getDate())\n        if (!shift) return 0\n\n        return shift.timeouts.length\n      },\n      getMiddleOperatorShiftsStart(shifts) {\n        if (shifts.length === 0) return 0\n        const minutes = Math.round(shifts.reduce((a, v) => a + new Date(v.start_date).getHours() * 60 + new Date(v.start_date).getMinutes(), 0) / shifts.length)\n        \n        return new Date(0, 0, 0, Math.floor(minutes / 60), minutes % 60, 0, 0)\n      },\n      getMiddleOperatorShiftsEnd(shifts) {\n        if (shifts.length === 0) return 0\n        const minutes = Math.round(shifts.reduce((a, v) => a + new Date(v.end_date).getHours() * 60 + new Date(v.end_date).getMinutes(), 0) / shifts.length)\n        \n        return new Date(0, 0, 0, Math.floor(minutes / 60), minutes % 60, 0, 0)\n      },\n      getMiddleOperatorShiftsTimeoutsTime(shifts) {\n        if (shifts.length === 0) return 0\n        \n        console.log(Math.round(\n          shifts.reduce(\n            (a, shift) => a + shift.timeouts.reduce(\n              (tA, timeout) => tA + (new Date(timeout.end_date) - new Date(timeout.start_date)), 0\n            ), 0\n          ) / shifts.length / 1000))\n\n        return Math.round(\n          shifts.reduce(\n            (a, shift) => a + shift.timeouts.reduce(\n              (tA, timeout) => tA + (new Date(timeout.end_date) - new Date(timeout.start_date)), 0\n            ), 0\n          ) / shifts.length / 1000\n        )\n      },\n      getMiddleOperatorShiftsTime(shifts) {\n        if (shifts.length === 0) return 0\n\n        return Math.round(\n          shifts.reduce(\n            (a, shift) => {\n              const timeouts = this.getOperatorShiftTimeoutsTimeAtDay(shifts, new Date(shift.start_date)) * 1000 \n\n              return a + (new Date(shift.end_date) - new Date(shift.start_date)) - timeouts\n            }, 0\n          ) / shifts.length / 1000\n        )\n      },\n    },\n  }\n</script>\n\n\n<style scoped>\n  .table__wrapper {\n    display: block;\n    overflow-x: auto;\n    max-width: 100%;\n  }\n\n  .table__table {\n    display: block;\n    max-width: 0;\n    white-space: nowrap;\n    padding-bottom: 20px;\n  }\n\n  .table__th,\n  .table__td {\n    text-align: center;\n    padding: 4px 8px;\n    vertical-align: top;\n    border-top: 2px solid var(--lt__main);\n    border-left: 2px solid var(--lt__main); \n  }\n\n  .table__th:last-child,\n  .table__td:last-child {\n    border-right: 2px solid var(--lt__main); \n  }\n\n  .table__tr:last-child > * {\n    border-bottom: 2px solid var(--lt__main); \n  } \n\n  .table__login {\n    text-align: left;\n  }\n\n  .table__hours {\n    text-align: center;\n  }\n\n\n  /* DARK THEME */\n\n  .dark__theme .table__th,\n  .dark__theme .table__td {\n    border-color: var(--dt__header);\n  }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}