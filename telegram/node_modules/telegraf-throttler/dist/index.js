"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.telegrafThrottler = void 0;
const bottleneck_1 = __importDefault(require("bottleneck"));
const TELEGRAM_NO_GROUP_RATE_LIMIT_SET = new Set([
    'getChat',
    'getChatAdministrators',
    'getChatMembersCount',
    'getChatMember',
    'sendChatAction',
]);
const WEBHOOK_REPLY_METHOD_ALLOWSET = new Set([
    'answerCallbackQuery',
    'answerInlineQuery',
    'deleteMessage',
    'leaveChat',
    'sendChatAction',
]);
const telegrafThrottler = (opts = {}) => {
    var _a, _b, _c, _d, _e;
    const groupConfig = (_a = opts.group) !== null && _a !== void 0 ? _a : {
        maxConcurrent: 1,
        minTime: 333,
        reservoir: 20,
        reservoirRefreshAmount: 20,
        reservoirRefreshInterval: 60000,
    };
    const inConfig = (_b = opts.in) !== null && _b !== void 0 ? _b : {
        highWater: 3,
        maxConcurrent: 1,
        minTime: 333,
        strategy: bottleneck_1.default.strategy.LEAK,
    };
    const outConfig = (_c = opts.out) !== null && _c !== void 0 ? _c : {
        minTime: 25,
        reservoir: 30,
        reservoirRefreshAmount: 30,
        reservoirRefreshInterval: 1000,
    };
    const inKey = (_d = opts.inKey) !== null && _d !== void 0 ? _d : 'from';
    const groupThrottler = new bottleneck_1.default.Group(groupConfig);
    const inThrottler = new bottleneck_1.default.Group(inConfig);
    const outThrottler = new bottleneck_1.default(outConfig);
    groupThrottler.on('created', throttler => throttler.chain(outThrottler));
    const defaultInErrorHandler = (ctx, _next, error) => __awaiter(void 0, void 0, void 0, function* () { return console.warn(`Inbound ${inKey} | ${error.message}`); });
    const errorHandler = (_e = opts.inThrottlerError) !== null && _e !== void 0 ? _e : defaultInErrorHandler;
    const middleware = (ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
        var _f, _g;
        const oldCallApi = ctx.telegram.callApi.bind(ctx.telegram);
        const newCallApi = function newCallApi(method, payload, { signal } = {}) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (!('chat_id' in payload)) {
                    return oldCallApi(method, payload, { signal });
                }
                // @ts-ignore
                const chatId = Number(payload.chat_id);
                const hasEnabledWebhookReply = this.options.webhookReply;
                // @ts-ignore
                const hasEndedResponse = (_a = this.response) === null || _a === void 0 ? void 0 : _a.writableEnded;
                const isAllowedMethod = WEBHOOK_REPLY_METHOD_ALLOWSET.has(method);
                const isAllowedGroupMethod = TELEGRAM_NO_GROUP_RATE_LIMIT_SET.has(method);
                const isGroup = chatId < 0;
                if (isNaN(chatId) ||
                    (hasEnabledWebhookReply && !hasEndedResponse && isAllowedMethod) ||
                    (isGroup && isAllowedGroupMethod)) {
                    return oldCallApi(method, payload, { signal });
                }
                const throttler = isGroup ? groupThrottler.key(`${chatId}`) : outThrottler;
                return throttler.schedule(() => oldCallApi(method, payload, { signal }));
            });
        };
        ctx.telegram.callApi = newCallApi.bind(ctx.telegram);
        const inKeyId = inKey === 'chat' ? Number((_f = ctx.chat) === null || _f === void 0 ? void 0 : _f.id) : Number((_g = ctx.from) === null || _g === void 0 ? void 0 : _g.id);
        if (isNaN(inKeyId)) {
            return next();
        }
        try {
            const throttler = inThrottler.key(`${inKeyId}`);
            return yield throttler.schedule(() => next());
        }
        catch (error) {
            if (error instanceof bottleneck_1.default.BottleneckError) {
                return errorHandler(ctx, next, error);
            }
            else {
                throw error;
            }
        }
    });
    return middleware;
};
exports.telegrafThrottler = telegrafThrottler;
exports.default = exports.telegrafThrottler;
