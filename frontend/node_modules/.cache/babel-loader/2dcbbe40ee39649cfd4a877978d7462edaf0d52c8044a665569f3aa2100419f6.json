{"ast":null,"code":"import moment from 'moment';\nexport default {\n  name: \"statistic-component\",\n  data() {\n    return {\n      days: []\n    };\n  },\n  methods: {\n    getDays() {\n      const currentDate = new Date();\n      this.days = Array.from({\n        length: new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()\n      }, (_, i) => {\n        return new Date(currentDate.getFullYear(), currentDate.getMonth(), i + 1);\n      });\n    },\n    getDate(date) {\n      return moment(date).format(\"DD.MM\");\n    },\n    getHoursForDay(statistic, date) {\n      let hours = 0;\n      statistic.operator_shifts.forEach(shift => {\n        if (moment(shift.start_date).format(\"DD.MM.YYYY\") != moment(date).format(\"DD.MM.YYYY\")) return;\n        hours += Math.ceil(Math.abs(new Date(shift.end_date) - new Date(shift.start_date)) / 36e5);\n      });\n      return hours;\n    }\n  },\n  mounted() {\n    this.getDays();\n    this.$store.dispatch(\"getOperatorsStatistic\");\n  }\n};","map":{"version":3,"mappings":"AAqCE,OAAOA,MAAK,MAAO,QAAQ;AAE3B,eAAe;EACbC,IAAI,EAAE,qBAAqB;EAC3BC,IAAI,GAAG;IACL,OAAO;MACLC,IAAI,EAAE;IACR;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,OAAO,GAAG;MACR,MAAMC,WAAU,GAAI,IAAIC,IAAI,EAAC;MAE7B,IAAI,CAACJ,IAAG,GAAIK,KAAK,CAACC,IAAI,CAAC;QAACC,MAAM,EAAE,IAAIH,IAAI,CAACD,WAAW,CAACK,WAAW,EAAE,EAAEL,WAAW,CAACM,QAAQ,EAAE,GAAC,CAAC,EAAE,CAAC,CAAC,CAACC,OAAO;MAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;QACrH,OAAO,IAAIR,IAAI,CAACD,WAAW,CAACK,WAAW,EAAE,EAAEL,WAAW,CAACM,QAAQ,EAAE,EAAEG,CAAC,GAAC,CAAC;MACxE,CAAC;IACH,CAAC;IACDF,OAAO,CAACG,IAAI,EAAE;MACZ,OAAOhB,MAAM,CAACgB,IAAI,CAAC,CAACC,MAAM,CAAC,OAAO;IACpC,CAAC;IACDC,cAAc,CAACC,SAAS,EAAEH,IAAI,EAAE;MAC9B,IAAII,KAAI,GAAI;MAEZD,SAAS,CAACE,eAAe,CAACC,OAAO,CAACC,KAAI,IAAK;QACzC,IAAIvB,MAAM,CAACuB,KAAK,CAACC,UAAU,CAAC,CAACP,MAAM,CAAC,YAAY,KAAKjB,MAAM,CAACgB,IAAI,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC,EAAE;QACxFG,KAAI,IAAKK,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAIpB,IAAI,CAACgB,KAAK,CAACK,QAAQ,IAAI,IAAIrB,IAAI,CAACgB,KAAK,CAACC,UAAU,CAAC,IAAI,IAAI,CAAC;MAC5F,CAAC;MAED,OAAOJ,KAAI;IACb;EACF,CAAC;EACDS,OAAO,GAAG;IACN,IAAI,CAACxB,OAAO,EAAC;IACb,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAAC,uBAAuB;EAChD;AACJ","names":["moment","name","data","days","methods","getDays","currentDate","Date","Array","from","length","getFullYear","getMonth","getDate","_","i","date","format","getHoursForDay","statistic","hours","operator_shifts","forEach","shift","start_date","Math","ceil","abs","end_date","mounted","$store","dispatch"],"sourceRoot":"","sources":["/home/f48d1/Documents/work/orbita/management/frontend/src/components/Admin/Statistic/Statistic.vue"],"sourcesContent":["<template>\n  <div class=\"page-block\">\n    <h2 class=\"page-block__header\">Статистика операторов</h2>\n\n    <div class=\"table__wrapper\">\n    <table class=\"table__table\" cellspacing=\"0\">\n      <tr class=\"table__thead\">\n        <th class=\"table__th\">Оператор</th>\n        <th class=\"table__th\" \n          v-for=\"day in days\"\n          v-bind:key=\"day.getDate()\">\n          {{getDate(day)}}\n        </th>\n        <th class=\"table__th\" \n          v-for=\"day in days\"\n          v-bind:key=\"day.getDate()\">\n          {{getDate(day)}}\n        </th>\n      </tr>\n\n      <tbody>\n        <tr class=\"table__tr\" v-for=\"statistic in this.$store.getters.operatorsStatistic()\"\n          v-bind:key=\"statistic.operator.operator.id\">\n          <td class=\"table__td table__login\">{{statistic.operator.operator.worker.login}}</td>\n          <td class=\"table__td table__hours\" v-for=\"day in days\"\n            v-bind:key=\"day.getDate()\">\n            {{getHoursForDay(statistic, day)}}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    </div>\n  </div>\n</template>\n\n\n<script>\n  import moment from 'moment';\n\n  export default {\n    name: \"statistic-component\",\n    data() {\n      return {\n        days: [],\n      }\n    },\n    methods: {\n      getDays() {\n        const currentDate = new Date()\n\n        this.days = Array.from({length: new Date(currentDate.getFullYear(), currentDate.getMonth()+1, 0).getDate()}, (_, i) => {\n          return new Date(currentDate.getFullYear(), currentDate.getMonth(), i+1)\n        })\n      },\n      getDate(date) {\n        return moment(date).format(\"DD.MM\")\n      },\n      getHoursForDay(statistic, date) {\n        let hours = 0\n\n        statistic.operator_shifts.forEach(shift => {\n          if (moment(shift.start_date).format(\"DD.MM.YYYY\") != moment(date).format(\"DD.MM.YYYY\")) return\n          hours += Math.ceil(Math.abs(new Date(shift.end_date) - new Date(shift.start_date)) / 36e5);\n        })\n\n        return hours\n      }\n    },\n    mounted() {\n        this.getDays()\n        this.$store.dispatch(\"getOperatorsStatistic\")\n    },\n}\n</script>\n\n\n<style scoped>\n  .table__wrapper {\n    display: block;\n    overflow-x: auto;\n    max-width: 100%;\n  }\n\n  .table__table {\n    display: block;\n    max-width: 0;\n    white-space: nowrap;\n  }\n\n  .table__th {\n    padding: 0 4px;\n  }\n\n  .table__login {\n    text-align: left;\n  }\n\n  .table__hours {\n    text-align: center;\n  }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}