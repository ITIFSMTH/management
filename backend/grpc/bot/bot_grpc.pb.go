// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: bot.proto

package botpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotServiceClient is the client API for BotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotServiceClient interface {
	WriteOperatorTelegramID(ctx context.Context, in *WriteTelegramIDRequest, opts ...grpc.CallOption) (*Empty, error)
	WriteOperatorCaptcha(ctx context.Context, in *WriteOperatorCaptchaRequest, opts ...grpc.CallOption) (*Empty, error)
	ReadTelegramBotKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TelegramBotKeyResponse, error)
	ReadOperator(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorResponse, error)
	ReadOperatorShift(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorShiftResponse, error)
	ReadOperatorTimeout(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorTimeoutResponse, error)
	StartOperatorShift(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorShiftResponse, error)
	StartOperatorTimeout(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorTimeoutResponse, error)
	StopOperatorShift(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorShiftWithTimeoutsResponse, error)
	StopOperatorTimeout(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorTimeoutResponse, error)
}

type botServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotServiceClient(cc grpc.ClientConnInterface) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) WriteOperatorTelegramID(ctx context.Context, in *WriteTelegramIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bot.BotService/WriteOperatorTelegramID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) WriteOperatorCaptcha(ctx context.Context, in *WriteOperatorCaptchaRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bot.BotService/WriteOperatorCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) ReadTelegramBotKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TelegramBotKeyResponse, error) {
	out := new(TelegramBotKeyResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/ReadTelegramBotKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) ReadOperator(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorResponse, error) {
	out := new(OperatorResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/ReadOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) ReadOperatorShift(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorShiftResponse, error) {
	out := new(OperatorShiftResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/ReadOperatorShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) ReadOperatorTimeout(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorTimeoutResponse, error) {
	out := new(OperatorTimeoutResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/ReadOperatorTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) StartOperatorShift(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorShiftResponse, error) {
	out := new(OperatorShiftResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/StartOperatorShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) StartOperatorTimeout(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorTimeoutResponse, error) {
	out := new(OperatorTimeoutResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/StartOperatorTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) StopOperatorShift(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorShiftWithTimeoutsResponse, error) {
	out := new(OperatorShiftWithTimeoutsResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/StopOperatorShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) StopOperatorTimeout(ctx context.Context, in *OperatorRequest, opts ...grpc.CallOption) (*OperatorTimeoutResponse, error) {
	out := new(OperatorTimeoutResponse)
	err := c.cc.Invoke(ctx, "/bot.BotService/StopOperatorTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServiceServer is the server API for BotService service.
// All implementations must embed UnimplementedBotServiceServer
// for forward compatibility
type BotServiceServer interface {
	WriteOperatorTelegramID(context.Context, *WriteTelegramIDRequest) (*Empty, error)
	WriteOperatorCaptcha(context.Context, *WriteOperatorCaptchaRequest) (*Empty, error)
	ReadTelegramBotKey(context.Context, *Empty) (*TelegramBotKeyResponse, error)
	ReadOperator(context.Context, *OperatorRequest) (*OperatorResponse, error)
	ReadOperatorShift(context.Context, *OperatorRequest) (*OperatorShiftResponse, error)
	ReadOperatorTimeout(context.Context, *OperatorRequest) (*OperatorTimeoutResponse, error)
	StartOperatorShift(context.Context, *OperatorRequest) (*OperatorShiftResponse, error)
	StartOperatorTimeout(context.Context, *OperatorRequest) (*OperatorTimeoutResponse, error)
	StopOperatorShift(context.Context, *OperatorRequest) (*OperatorShiftWithTimeoutsResponse, error)
	StopOperatorTimeout(context.Context, *OperatorRequest) (*OperatorTimeoutResponse, error)
	mustEmbedUnimplementedBotServiceServer()
}

// UnimplementedBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBotServiceServer struct {
}

func (UnimplementedBotServiceServer) WriteOperatorTelegramID(context.Context, *WriteTelegramIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteOperatorTelegramID not implemented")
}
func (UnimplementedBotServiceServer) WriteOperatorCaptcha(context.Context, *WriteOperatorCaptchaRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteOperatorCaptcha not implemented")
}
func (UnimplementedBotServiceServer) ReadTelegramBotKey(context.Context, *Empty) (*TelegramBotKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTelegramBotKey not implemented")
}
func (UnimplementedBotServiceServer) ReadOperator(context.Context, *OperatorRequest) (*OperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOperator not implemented")
}
func (UnimplementedBotServiceServer) ReadOperatorShift(context.Context, *OperatorRequest) (*OperatorShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOperatorShift not implemented")
}
func (UnimplementedBotServiceServer) ReadOperatorTimeout(context.Context, *OperatorRequest) (*OperatorTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOperatorTimeout not implemented")
}
func (UnimplementedBotServiceServer) StartOperatorShift(context.Context, *OperatorRequest) (*OperatorShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOperatorShift not implemented")
}
func (UnimplementedBotServiceServer) StartOperatorTimeout(context.Context, *OperatorRequest) (*OperatorTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOperatorTimeout not implemented")
}
func (UnimplementedBotServiceServer) StopOperatorShift(context.Context, *OperatorRequest) (*OperatorShiftWithTimeoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOperatorShift not implemented")
}
func (UnimplementedBotServiceServer) StopOperatorTimeout(context.Context, *OperatorRequest) (*OperatorTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOperatorTimeout not implemented")
}
func (UnimplementedBotServiceServer) mustEmbedUnimplementedBotServiceServer() {}

// UnsafeBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServiceServer will
// result in compilation errors.
type UnsafeBotServiceServer interface {
	mustEmbedUnimplementedBotServiceServer()
}

func RegisterBotServiceServer(s grpc.ServiceRegistrar, srv BotServiceServer) {
	s.RegisterService(&BotService_ServiceDesc, srv)
}

func _BotService_WriteOperatorTelegramID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTelegramIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).WriteOperatorTelegramID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/WriteOperatorTelegramID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).WriteOperatorTelegramID(ctx, req.(*WriteTelegramIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_WriteOperatorCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteOperatorCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).WriteOperatorCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/WriteOperatorCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).WriteOperatorCaptcha(ctx, req.(*WriteOperatorCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_ReadTelegramBotKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).ReadTelegramBotKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/ReadTelegramBotKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).ReadTelegramBotKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_ReadOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).ReadOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/ReadOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).ReadOperator(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_ReadOperatorShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).ReadOperatorShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/ReadOperatorShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).ReadOperatorShift(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_ReadOperatorTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).ReadOperatorTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/ReadOperatorTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).ReadOperatorTimeout(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_StartOperatorShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).StartOperatorShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/StartOperatorShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).StartOperatorShift(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_StartOperatorTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).StartOperatorTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/StartOperatorTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).StartOperatorTimeout(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_StopOperatorShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).StopOperatorShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/StopOperatorShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).StopOperatorShift(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_StopOperatorTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).StopOperatorTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.BotService/StopOperatorTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).StopOperatorTimeout(ctx, req.(*OperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotService_ServiceDesc is the grpc.ServiceDesc for BotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bot.BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteOperatorTelegramID",
			Handler:    _BotService_WriteOperatorTelegramID_Handler,
		},
		{
			MethodName: "WriteOperatorCaptcha",
			Handler:    _BotService_WriteOperatorCaptcha_Handler,
		},
		{
			MethodName: "ReadTelegramBotKey",
			Handler:    _BotService_ReadTelegramBotKey_Handler,
		},
		{
			MethodName: "ReadOperator",
			Handler:    _BotService_ReadOperator_Handler,
		},
		{
			MethodName: "ReadOperatorShift",
			Handler:    _BotService_ReadOperatorShift_Handler,
		},
		{
			MethodName: "ReadOperatorTimeout",
			Handler:    _BotService_ReadOperatorTimeout_Handler,
		},
		{
			MethodName: "StartOperatorShift",
			Handler:    _BotService_StartOperatorShift_Handler,
		},
		{
			MethodName: "StartOperatorTimeout",
			Handler:    _BotService_StartOperatorTimeout_Handler,
		},
		{
			MethodName: "StopOperatorShift",
			Handler:    _BotService_StopOperatorShift_Handler,
		},
		{
			MethodName: "StopOperatorTimeout",
			Handler:    _BotService_StopOperatorTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}
